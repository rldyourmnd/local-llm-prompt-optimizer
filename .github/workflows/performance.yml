name: Performance Testing

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  backend-performance:
    name: Backend Load Testing
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow failure since LM Studio is not available in CI

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: sqlite:///test.db
          LM_STUDIO_BASE_URL: http://localhost:1234/v1
        run: |
          uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Check server is running
        run: curl -f http://localhost:8000/health || exit 1

      - name: Create Locust test file
        run: |
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between

          class APIUser(HttpUser):
              wait_time = between(1, 3)

              @task
              def get_health(self):
                  """Test health endpoint performance."""
                  self.client.get("/health")

              @task
              def get_root(self):
                  """Test root endpoint performance."""
                  self.client.get("/")
          EOF

      - name: Run load test
        run: |
          locust -f locustfile.py --headless \
            --host http://localhost:8000 \
            --users 10 \
            --spawn-rate 2 \
            --run-time 60s \
            --html performance-report.html \
            --csv performance-results

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance-report.html
            performance-results*.csv

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install memory-profiler psutil

      - name: Run memory profiling on tests
        working-directory: ./backend
        run: |
          python -m memory_profiler tests/test_optimization_service.py > memory-profile.txt || true
          cat memory-profile.txt

      - name: Upload memory profile
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: memory-profile
          path: backend/memory-profile.txt

  lighthouse-frontend:
    name: Frontend Performance (Lighthouse)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Serve frontend
        working-directory: ./frontend
        run: |
          npx http-server dist -p 3000 &
          sleep 3

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true

  dependency-size-check:
    name: Check Dependency Sizes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Analyze frontend bundle size
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} \; | sort -h

      - name: Check Python package sizes
        working-directory: ./backend
        run: |
          pip install pipdeptree
          pipdeptree --json > dependencies.json
          cat dependencies.json
